#%%
from fastapi import HTTPException, APIRouter, Depends
import subprocess
import os
import tempfile
import logging

from models.generate import GenerateRequest, GenerateResponse
from services.store_service import StoreService
from deps import get_store_service

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = APIRouter()

@router.post("/generate_lattice", response_model=GenerateResponse)
def generate_lattice(request: GenerateRequest, store_service: StoreService = Depends(get_store_service)):
    """
    Endpoint to generate crystal lattices using MatterGen based on input parameters.

    This endpoint accepts one or more magnetic densities and guidance factors.
    It runs the external 'mattergen-generate' command for each permutation
    of these parameters, storing the results in uniquely named subdirectories
    within a temporary location.

    Failures during individual 'mattergen-generate' runs are logged, and processing
    continues with the next permutation.

    After attempting all permutations, it uses the injected StoreService to process
    all successfully generated result directories. This involves parsing the
    generated .extxyz files, optionally running MatterSim for energy/force/stress
    calculations (based on StoreService configuration), and storing the final data
    in the configured MongoDB collection.

    Args:
        request (GenerateRequest): The request body containing:
            - magnetic_density (List[float]): A list of magnetic densities to use.
            - guidance_factor (List[float]): A list of guidance factors to use.
            - batch_size (int): The batch size parameter for 'mattergen-generate'.
        store_service (StoreService): An instance of StoreService injected via
            `Depends(get_store_service)`, used for processing generated files
            (including MatterSim runs) and database storage.

    Returns:
        GenerateResponse: A JSON response containing the status, a summary message,
            the total number of parameter permutations attempted, the number of
            batches successfully generated by MatterGen, and the number of batches
            successfully processed and added to the database by the StoreService.

    Raises:
        HTTPException: With status code 500 if a critical error occurs during
            the batch processing stage (MatterSim calculations or database storage)
            via the `store_service.process_batch` call.
    """
    
    mag_density = request.magnetic_density
    guidance_factor = request.guidance_factor
    batch_size = request.batch_size

    num_mag_density = len(mag_density)
    num_guidance_factor = len(guidance_factor)
    total_permutations = num_mag_density * num_guidance_factor

    if not total_permutations:
         raise HTTPException(status_code=400, detail="Must provide at least one magnetic_density and one guidance_factor.")

    if num_mag_density == 1 and num_guidance_factor == 1:
        logger.info(f"Starting single batch generation (1 permutation) ...")
    else:
        logger.info(f"Starting multi batch generation with {total_permutations} total permutations...")

    generated_batches_count = 0
    db_added_batches_count = 0

    with tempfile.TemporaryDirectory() as batch_results_dir:
        logger.info(f"Using temporary directory for generation: {batch_results_dir}")
        current_permutation_index = 0
        for md in mag_density:
            for gf in guidance_factor:
                current_permutation_index += 1
                results_path = os.path.join(batch_results_dir,f"dft_mag_density_{md}_{gf}")

                gen_command = [
                    "mattergen-generate", results_path,
                    "--pretrained-name=dft_mag_density",
                    f"--batch_size={batch_size}",
                    f'--properties_to_condition_on={{"dft_mag_density": {md}}}',
                    f"--diffusion_guidance_factor={gf}"
                ]

                try:
                    logger.info(f"🚀\tRunning {current_permutation_index}/{total_permutations} MatterGen inference:\n \t{' '.join(gen_command)}")
                    gen_result = subprocess.run(gen_command, capture_output=True, text=True, check=True)
                    logger.info(f"✅ MatterGen success\n {gen_result.stdout}")
                    generated_batches_count += 1
                except FileNotFoundError:
                    logger.critical(f"❌ CRITICAL ERROR: 'mattergen-generate' command not found. Ensure it is installed and in the system PATH.")
                    raise HTTPException(status_code=500, detail="'mattergen-generate' command not found on server.")
                except subprocess.CalledProcessError as e:
                    logger.error(f"❌\tMatterGen failed for mag_density={md}, guidance_factor={gf}:\n \t{e.stderr}")
                    logger.error("Continuing with the next permutation.")
                    continue
                
        logger.info(f"Completed {generated_batches_count}/{total_permutations} permutations successfully for MatterGen\n {'%'*120}\n")
        if generated_batches_count > 0:
            try:
                logger.info(f"⚙️\tHanding over {generated_batches_count} generated result directories in {batch_results_dir} to StoreService...")
                db_added_batches_count  = store_service.process_batch(batch_results_dir)
                logger.info(f"✅ StoreService processed results. {db_added_batches_count} batches added to DB.")
            
            except Exception as e:
                # Catch exceptions from store_service (includes MatterSim/DB errors)
                logger.error(f"❌ Error during StoreService processing (MatterSim/DB): {e}", exc_info=True) # Log traceback
                raise HTTPException(status_code=500, detail=f"Error during result processing/storage: {str(e)}")
        else:
             logger.warning("No MatterGen batches were generated successfully. Skipping database processing.")

    return GenerateResponse(
        status="success" if generated_batches_count > 0 else "completed_with_no_generations",
        message="Lattice generation and processing finished.",
        total_permutations=total_permutations,
        generated_batches=generated_batches_count,
        db_added_batches=db_added_batches_count
    )
