#%%
from fastapi import APIRouter
import subprocess
import os
import tempfile
import logging
from typing import List

from services.store_service import StoreService
from database import connect_to_mongo, close_mongo

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = APIRouter()

def run_generation_and_processing(mag_density: List,
                                  guidance_factor: List,
                                  batch_size: int):
    """
    This function runs in the background.
    It performs the lattice generation and processing.
    
    To generate crystal lattices using MatterGen based on input parameters.

    This endpoint accepts one or more magnetic densities and guidance factors.
    It runs the external 'mattergen-generate' command for each permutation
    of these parameters, storing the results in uniquely named subdirectories
    within a temporary location.

    Failures during individual 'mattergen-generate' runs are logged, and processing
    continues with the next permutation.

    After attempting all permutations, it uses the injected StoreService to process
    all successfully generated result directories. This involves parsing the
    generated .extxyz files, optionally running MatterSim for energy/force/stress
    calculations (based on StoreService configuration), and storing the final data
    in the configured MongoDB collection.

    Args:
        request (GenerateRequest): The request body containing:
            - magnetic_density (List[float]): A list of magnetic densities to use.
            - guidance_factor (List[float]): A list of guidance factors to use.
            - batch_size (int): The batch size parameter for 'mattergen-generate'.
        store_service (StoreService): An instance of StoreService injected via
            `Depends(get_store_service)`, used for processing generated files
            (including MatterSim runs) and database storage.

    Returns:
        GenerateResponse: A JSON response containing the status, a summary message,
            the total number of parameter permutations attempted, the number of
            batches successfully generated by MatterGen, and the number of batches
            successfully processed and added to the database by the StoreService.

    Raises:
        HTTPException: With status code 500 if a critical error occurs during
            the batch processing stage (MatterSim calculations or database storage)
            via the `store_service.process_batch` call.
    """
    logger.info("Background task started: Running MatterGen permutations.")
    
    num_mag_density = len(mag_density)
    num_guidance_factor = len(guidance_factor)
    total_permutations = num_mag_density * num_guidance_factor

    if num_mag_density == 1 and num_guidance_factor == 1:
        logger.info(f"Background Task: Starting single batch generation (1 permutation) ...")
    else:
        logger.info(f"Background Task: Starting multi batch generation with {total_permutations} total permutations...")

    generated_batches_count = 0
    db_added_batches_count = 0

    with tempfile.TemporaryDirectory() as batch_results_dir:
        logger.info(f"Background Task: Storing generated lattices in temporary directory: {batch_results_dir}")
        current_permutation_index = 0
        for md in mag_density:
            for gf in guidance_factor:
                current_permutation_index += 1
                results_path = os.path.join(batch_results_dir,f"dft_mag_density_{md}_{gf}")

                gen_command = [
                    "mattergen-generate", results_path,
                    "--pretrained-name=dft_mag_density",
                    f"--batch_size={batch_size}",
                    f'--properties_to_condition_on={{"dft_mag_density": {md}}}',
                    f"--diffusion_guidance_factor={gf}"
                ]

                try:
                    logger.info(f"üöÄ Background Task: Running {current_permutation_index}/{total_permutations} MatterGen inference:\n \t{' '.join(gen_command)}")
                    gen_result = subprocess.run(gen_command, capture_output=True, text=True, check=True)
                    logger.info(f"‚úÖ Background Task: MatterGen successful\n {gen_result.stdout}")
                    generated_batches_count += 1
                except FileNotFoundError:
                    logger.critical(f"‚ùå CRITICAL ERROR in Background Task: 'mattergen-generate' command not found. Ensure it is installed and in the system PATH.")
                    return
                except subprocess.CalledProcessError as e:
                    logger.error(f"‚ùå Background Task: MatterGen failed for mag_density={md}, guidance_factor={gf}:\n \t{e.stderr}")
                    logger.error("Background Task: Continuing with the next permutation.")
                    continue

        logger.info(f"Background Task: Completed {generated_batches_count}/{total_permutations} permutations successfully for MatterGen\n\n {'%'*120}\n")
        if generated_batches_count > 0:
            client = None
            try:
                client, lattice_collection = connect_to_mongo()
                if not lattice_collection:
                    logger.warning(f"Failed to retrieve the 'lattice' collection from the database. Please verify the DB connection details and the collection configuration.")
                
                logger.info(f"‚öôÔ∏è Background Task: Handing over {generated_batches_count} generated result directories in {batch_results_dir} to StoreService...")
                store_service = StoreService(lattice_collection)
                db_added_batches_count  = store_service.process_batch(batch_results_dir)
                logger.info(f"Background Task: StoreService completed processing results. {db_added_batches_count} batches added to DB.")
            except Exception as e:
                # Catch exceptions from store_service (includes MatterSim/DB errors)
                logger.warning(f"‚ùå Background Task: Error during StoreService processing (MatterSim/DB): {e}", exc_info=True)
            finally:
                if client:
                    close_mongo(client)
        else:
            logger.warning("Background Task: No MatterGen batches were generated successfully. Skipping database processing.")
        if generated_batches_count == db_added_batches_count:
            logger.info("‚úÖ Background Task: All generated batches successfully added into database.")

    logger.info(f"Background Task finished. Generated: {generated_batches_count} for {total_permutations} total permutations.\n Added {db_added_batches_count} batches to DB.")
# %%
